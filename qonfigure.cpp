#include "qonfigure.h"
#include "ui_qonfigure.h"

Qonfigure::Qonfigure(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::Qonfigure)
{
    ui->setupUi(this);

    m_pages = new myTabPage[4];
    ui->devices->addTab(&m_pages[0], "Device 1");
    ui->devices->addTab(&m_pages[1], "Device 2");
    ui->devices->addTab(&m_pages[2], "Device 3");
    ui->devices->addTab(&m_pages[3], "Device 4");
}

Qonfigure::~Qonfigure()
{
    delete ui;
}

void Qonfigure::on_actionNew_Device_triggered()
{
    ui->devices->addTab(new myTabPage(), "New Device");
}

void Qonfigure::removeTab(int index)
{
    ui->devices->removeTab(index);
}

void Qonfigure::on_actionSave_triggered()
{
    QString fname = filename;

    if (fname=="")
        fname = QFileDialog::getSaveFileName(this, "Save header file", QDir::homePath()+"/timerconfig.h", "Header Files (*.h)");
    else
        fname = QFileDialog::getSaveFileName(this, "Save header file", fname, "Header Files (*.h)");

    if (fname=="")
        return;

    QFile file ( fname );
    filename = fname;
    //if ( !file.open(QIODevice::WriteOnly | QIODevice::Text) )
    if ( ! (file.permissions() & QFile::WriteUser) ) {
        QMessageBox::critical (this, "Error", "You do not have permission to write to the specified filepath.");
        return;
    }

    QString outString;
    QTextStream out (&outString);
    out << "/************************Automatically generated by Qonfigure 0.1****************************/\n\n";

    QStringList prefix;
    prefix << "ONE" << "TWO" << "THREE" << "FOUR";
    field *f;
    value *v;

    QString later="";

    for (int i=0; i<4; i++) {
        QString n = prefix.at(i);

        out << "/********* Device " << i+1 << "************/\n";
        out << "#define DEV_" << n << "_Device_ID\t\t\t\"" << m_pages[i].getDevice_ID() << "\"\n";
        out << "#define DEV_" << n << "_Model\t\t\t\"" << m_pages[i].getModel() << "\"\n";
        out << "#define DEV_" << n << "_CommonSignal\t\t\t" << m_pages[i].getCommonSignal() << "\n";
        out << "#define DEV_" << n << "_COMMON_SIGNAL_LENGTH\t\t\t" << m_pages[i].getCOMMON_SIGNAL_LENGTH() << "\n";
        out << "#define DEV_" << n << "_CMD_SIGNAL_LENGTH\t\t\t" << m_pages[i].getCMD_SIGNAL_LENGTH() << "\n";

        QString var;
        f = m_pages[i].getFields();
        for (int j=0; j<m_pages[i].getFieldSize(); j++) {
            var = "T3_";
            out << "#define DEV_" << n << "_" << f[j].label << "\t\t\tT3_";
            double val = f[j].time->value();
            out << (int)val;
            var += QString("%1").arg((int)val);
            if (val!=(int)val) {
                out << "_" << (val-(int)val)*10;
                var += QString("_%1").arg((val-(int)val)*10);
            }
            QString tmp = f[j].unit->itemData(f[j].unit->currentIndex()).toString();
            out << tmp;
            var += tmp;
            if (f[j].label.endsWith("low", Qt::CaseInsensitive)) {
                out << "_LOW\n";
                var += "_LOW";
            }
            else if (f[j].label.endsWith("high", Qt::CaseInsensitive)) {
                out << "_HIGH\n";
                var += "_HIGH";
            }
            if ( !later.contains(var) )
                later += "#define " + var + "\t\t\t" + f[j].hex->text() + "\n";
            else if ( !later.contains(var + "\t\t\t" + f[j].hex->text()) ) {
                QMessageBox::critical (this, "Error", "Multiple definitions of "+var);
                return;
            }
        }
        out << "\n";

        v = m_pages[i].getValues();
        for (int j=0; j<m_pages[i].getValueSize(); j++) {
            out << "#define DEV_" << n << "_" << v[j].label << "\t\t\t" << v[j].value->text() << "\n";
        }
        out << "\n";
    }

    out << "/*****Timer settings*******/\n" << later;

    if ( !file.open(QIODevice::WriteOnly | QIODevice::Text) ) {
        QMessageBox::critical (this, "Error", "Error opening file for writing.");
        return;
    }
    QTextStream fileOut(&file);
    fileOut << outString << "\n";
    file.close();
}
